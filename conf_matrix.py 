import torch, time, copy
import torch.nn as nn
import torch.optim as optim
import numpy as np
from torchvision import datasets, models, transforms 
import os 
from PIL import Image
from efficientnet_pytorch import EfficientNet
from tqdm import tqdm

image_size = (224,224)
data_transforms={"train":transforms.Compose([transforms.Resize(image_size),
                                             transforms.ToTensor(),
                                             transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
                                           ]),
                "val":transforms.Compose([transforms.Resize(image_size),
                                          transforms.ToTensor(),
                                          transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
                                           ])
                }
 
data_dir=r"covid"
 
image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir,x),data_transforms[x]) for x in ["train","val"]}

dataloaders={}
dataloaders["train"]=torch.utils.data.DataLoader(image_datasets["train"], batch_size=64, shuffle=True, num_workers=4) 
dataloaders["val"]=torch.utils.data.DataLoader(image_datasets["val"], batch_size=64, shuffle=False, num_workers=4) 

dataset_sizes={x: len(image_datasets[x]) for x in ["train","val"]}
 
class_names=image_datasets["train"].classes
print(class_names)

nb_classes=len(class_names)
device=torch.device("cuda" if torch.cuda.is_available() else "cpu")

model_ft = torch.load("./models/efnet-b3-last.pth", map_location=device)
model_ft.eval()

confusion_matrix = torch.zeros(nb_classes, nb_classes)
with torch.no_grad():
    for i, (inputs, classes) in enumerate(tqdm(dataloaders['val'])):
        inputs = inputs.to(device)
        classes = classes.to(device)
        outputs = model_ft(inputs)
        _, preds = torch.max(outputs, 1)
        for t, p in zip(classes.view(-1), preds.view(-1)):
                confusion_matrix[t.long(), p.long()] += 1

print(confusion_matrix)
print(confusion_matrix.diag()/confusion_matrix.sum(1))
